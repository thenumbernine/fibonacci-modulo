#!/usr/bin/env rua

local cmdline = require 'ext.cmdline'.validate{
	n = {desc='polygon size'},
	gl = {desc='OpenGL backend'},
	width = {desc='window width'},
	height = {desc='window height'},
	screenshot = {desc='do screenshot'},
}(...)
local gl = require 'gl.setup'(cmdline.gl or 'OpenGL')
local ig = require 'imgui'
local GLSceneObject = require 'gl.sceneobject'
local fib = require 'fibonacci-modulo.fibonacci'

local App = require 'imguiapp.withorbit'()
App.viewUseBuiltinMatrixMath = true

-- do we want to take a pic and leave?
local doScreenshotAndExit = cmdline.screenshot
App.width = cmdline.width or App.width
App.height = cmdline.height or App.height

App.init = [:, ...] do
	self.polySize = math.max(2, tonumber(cmdline.n) or 10)
	self.title = 'Fibonacci Sequence Modulo '..self.polySize
	return App.super.init(self, ...)
end

App.initGL = [:, ...] do
	App.super.initGL(self, ...)
	self.view.ortho = true
	self.view.orthoSize = 1.1

	-- [=[ TOOD I use this often enough, put it in one place
	self.gradTex = require 'gl.gradienttex2d'(256,
--[[ rainbow or heatmap or whatever
		{
			{0,0,0,0},
			{1,0,0,1/6},
			{1,1,0,2/6},
			{0,1,1,3/6},
			{0,0,1,4/6},
			{1,0,1,5/6},
			{0,0,0,6/6},
		},
--]]
-- [[ sunset pic from https://blog.graphiq.com/finding-the-right-color-palettes-for-data-visualizations-fcd4e707a283#.inyxk2q43
		{
			{22/255,31/255,86/255,1},
			{34/255,54/255,152/255,1},
			{87/255,49/255,108/255,1},
			{156/255,48/255,72/255,1},
			{220/255,60/255,57/255,1},
			{254/255,96/255,50/255,1},
			{255/255,188/255,46/255,1},
			{255/255,255/255,55/255,1},
		},
--]]
		false
	):unbind()
	--]=]

	self:reset()
end

App.getPt = [:, i] (([th](math.cos(th), math.sin(th)))((i/self.polySize + .25)*2*math.pi))

App.reset = [:] do
	self.sequence = fib.makeSequence(self.polySize)
	self.dense = fib.isDense(self.sequence, self.polySize)

	local vtxs = table()
	for i=0,self.polySize-1 do
		local x, y = self:getPt(i)
		vtxs:append{x, y, i/self.polySize}
	end
	
	self.vertexBuf = require 'gl.arraybuffer'{
		data = vtxs,
		dim = 3,
	}:unbind()
	self.ptsceneobj = GLSceneObject{
		program = {
			version = 'latest',
			precision = 'best',
			vertexCode = [[
in vec3 vertex;
uniform mat4 mvProjMat;
void main() {
	gl_PointSize = 3.;	//doesn't work anyways
	gl_Position = mvProjMat * vec4(vertex.xy, 0., 1.);
}
]],
			fragmentCode = [[
out vec4 fragColor;
void main() {
	fragColor = vec4(1., 1., 1., 1.);
}
]],
		},
		vertexes = self.vertexBuf,
		geometry = {
			mode = gl.GL_POINTS,
		},
	}

	self.linesceneobj = GLSceneObject{
		program = {
			version = 'latest',
			precision = 'best',
			vertexCode = [[
in vec3 vertex;
out float tcv;
uniform mat4 mvProjMat;
void main() {
	tcv = vertex.z;
	gl_Position = mvProjMat * vec4(vertex.xy, 0., 1.);
}
]],
			fragmentCode = [[
in float tcv;
out vec4 fragColor;
uniform sampler2D tex;
void main() {
	fragColor = texture(tex, vec2(tcv, .5));
}
]],
		},
		texs = {self.gradTex},
		vertexes = self.vertexBuf,
		geometry = {
			mode = gl.GL_LINE_LOOP,
			indexes = {
				data = self.sequence,
			},
		},
	}
end

App.update = [:, ...] do
	self.view:setup(self.width / self.height)	-- GLApp.View.apply update

	gl.glClear(gl.GL_COLOR_BUFFER_BIT)

	self.ptsceneobj.uniforms.mvProjMat = self.view.mvProjMat.ptr
	self.ptsceneobj:draw()
	self.linesceneobj.uniforms.mvProjMat = self.view.mvProjMat.ptr
	self.linesceneobj:draw()

	if doScreenshotAndExit then
		self:screenshotToFile(doScreenshotAndExit)
		self:requestExit()
	end

	App.super.super.update(self, ...)	-- ImGuiApp's update
end

App.updateGUI = [:] do
	if ig.luatableInputInt('n', self, 'polySize') then
		self.polySize = math.max(2, self.polySize)
		self:reset()
	end
	ig.igText('dense? '..tostring(self.dense))
end

return App():run()
